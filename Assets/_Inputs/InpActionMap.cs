//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Inputs/InpActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InpActionMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InpActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InpActionMap"",
    ""maps"": [
        {
            ""name"": ""InGameAP"",
            ""id"": ""7d98ecf6-cf1c-4a4f-8f18-7d9374c0337d"",
            ""actions"": [
                {
                    ""name"": ""select"",
                    ""type"": ""Button"",
                    ""id"": ""3f5fa191-29b2-4e66-9a82-b8b68b1c02ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""selectPos"",
                    ""type"": ""Value"",
                    ""id"": ""3403e26e-727a-45ed-bc11-6e5f33452e29"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a72fabf9-14c5-4730-8466-aa4474a65f42"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80441811-6a9f-49b7-824f-4708f14a6bde"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""selectPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InGameAP
        m_InGameAP = asset.FindActionMap("InGameAP", throwIfNotFound: true);
        m_InGameAP_select = m_InGameAP.FindAction("select", throwIfNotFound: true);
        m_InGameAP_selectPos = m_InGameAP.FindAction("selectPos", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGameAP
    private readonly InputActionMap m_InGameAP;
    private IInGameAPActions m_InGameAPActionsCallbackInterface;
    private readonly InputAction m_InGameAP_select;
    private readonly InputAction m_InGameAP_selectPos;
    public struct InGameAPActions
    {
        private @InpActionMap m_Wrapper;
        public InGameAPActions(@InpActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @select => m_Wrapper.m_InGameAP_select;
        public InputAction @selectPos => m_Wrapper.m_InGameAP_selectPos;
        public InputActionMap Get() { return m_Wrapper.m_InGameAP; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameAPActions set) { return set.Get(); }
        public void SetCallbacks(IInGameAPActions instance)
        {
            if (m_Wrapper.m_InGameAPActionsCallbackInterface != null)
            {
                @select.started -= m_Wrapper.m_InGameAPActionsCallbackInterface.OnSelect;
                @select.performed -= m_Wrapper.m_InGameAPActionsCallbackInterface.OnSelect;
                @select.canceled -= m_Wrapper.m_InGameAPActionsCallbackInterface.OnSelect;
                @selectPos.started -= m_Wrapper.m_InGameAPActionsCallbackInterface.OnSelectPos;
                @selectPos.performed -= m_Wrapper.m_InGameAPActionsCallbackInterface.OnSelectPos;
                @selectPos.canceled -= m_Wrapper.m_InGameAPActionsCallbackInterface.OnSelectPos;
            }
            m_Wrapper.m_InGameAPActionsCallbackInterface = instance;
            if (instance != null)
            {
                @select.started += instance.OnSelect;
                @select.performed += instance.OnSelect;
                @select.canceled += instance.OnSelect;
                @selectPos.started += instance.OnSelectPos;
                @selectPos.performed += instance.OnSelectPos;
                @selectPos.canceled += instance.OnSelectPos;
            }
        }
    }
    public InGameAPActions @InGameAP => new InGameAPActions(this);
    public interface IInGameAPActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnSelectPos(InputAction.CallbackContext context);
    }
}
